(load "src/flag.carp")
(load "src/error.carp")

(doc CligProgram
  "CligProgram represents a runnable command line program."
  "A CligProgram is the primary input to other Clig routines."
  "One can add command line flags to a clig program using add-flag."
  "Once your flags are added, parse them using parse.")
(deftype CligProgram [name   String
                      flags  (Map String CligFlag)
                      errors (Array CligErr)
                      args   (Array String)
                      usage  String])
(defmodule Clig
  (doc new
    "Returns a new clig program."
    "Provide a program name and short usage synopsis")
  (defn new [name usage-string]
    (let [options (Map.create)
          errs    []
          args    []]
      (CligProgram.init name options errs args usage-string)))

  (doc usage
    "Returns the usage string for a program."
    "The usage string will include usage help for all the program flags.")
  (defn usage [program]
    (let [flags (Map.vals (CligProgram.flags program))
          flag-helps (copy-map &flag-usage &flags)
          cli-help (String.join ": " &[@(CligProgram.name program) @(CliProgram.usage program)])
          full-help (Array.concat &[[cli-help] flag-helps])]
      (String.join "\n\t" &full-help)))

  (doc get-flag
    "Retrieves a program flag."
    "If the flag doesn't exist, returns Maybe.Nothing.")
  (defn get-flag [program flag-name]
    (let [flags (CligProgram.flags program)]
      (get-maybe flags flag-name)))

  (doc get
    "Retrieves the value of a program flag."
    "Returns an empty string when the flag does not exist.")
  (defn get [program flag-name]
    (let [flags (CligProgram.flags program)
          default (CligFlag @""
                            (Maybe.Nothing)
                            (CligType.String)
                            @""
                            @""
                            @"")
          flag (get-with-default flags flag-name &default)]
      @(CliFlag.value &flag)))

  (doc get-flag-by-short
    "Retrieves a program flag by its short name."
    "Returns Maybe.Nothing if no flag with the short name exists.")
  (defn get-flag-by-short [program short-name]
    (let [flags       (CligProgram.flags program)
          short-keyed (Map.create)
          shorts      (vals flags)]
      (do (for [i 0 (Array.length &shorts)]
            (Map.put! &short-keyed &(or-zero @(CligFlag.short (unsafe-nth &shorts
            i))) (unsafe-nth &shorts i)))
          (get-maybe &short-keyed short-name))))

  (defn flag-set? [program flag-name]
    (let [flags (CligProgram.flags program)
          default (CligFlag @""
                            (Maybe.Nothing)
                            (CligType.String)
                            @""
                            @""
                            @"")
          flag (get-with-default flags flag-name &default)]
      (and (not (= (Clig.get program flag-name) @""))
           (not (Clig.is-default-set? &flag)))))

  (doc add-flag
    "Adds a flag to a clig program.")
  (defn add-flag [program the-flag]
    (let [existing (CligProgram.flags program)
          name     (CligFlag.name the-flag)
          errs     (CligProgram.errors program)
          short    &(or-zero @(CligFlag.short the-flag))]
      (match (get-maybe existing name)
        (Maybe.Just _)  (push-back! errs (Clig.Err.flag-exists @name))
        (Maybe.Nothing)
          (match (get-flag-by-short program short)
            (Maybe.Just _)  (push-back! errs (Clig.Err.flag-exists @short))
            (Maybe.Nothing) (Map.put! existing name the-flag)))))

  (defn add-flags [program flags]
    (do (for [i 0 (Array.length flags)]
          (Clig.add-flag program (Array.unsafe-nth flags i)))))

  (defn parse-flag [program flag-name arg]
    (let [flags  (CligProgram.flags program)
          errs   (CligProgram.errors program)
          name   (Pattern.substitute #"^\-\-?" flag-name "" 1)]
      (match (get-maybe flags &name)
        (Maybe.Nothing)
          (match (get-flag-by-short program &name)
            (Maybe.Just f) (parse-flag program (CligFlag.name &f) arg)
            _ (do (push-back! errs (Clig.Err.unknown-flag @flag-name))
                  (Result.Error (Pair.init @(unsafe-last errs) 0))))
        (Maybe.Just f)
          (match-ref (CligFlag.t &f)
            (CligType.Bool)
              (do (Map.put! flags &name &(CligFlag.set-value f @"true"))
                  (Result.Success 0))
            _ (match arg
                (Maybe.Nothing)
                  (do (push-back! errs (Clig.Err.missing-argument @flag-name))
                      (Result.Error (Pair.init @(unsafe-last errs) 0)))
                (Maybe.Just a)
                  (do  (Map.put! flags &name &(CligFlag.set-value f @&a))
                       (if (valid? &(unsafe-from (get-flag program &name)))
                           (Result.Success 1)
                           (do (push-back! errs (Clig.Err.invalid-argument @flag-name
                                                                           @&a))
                               (Result.Error (Pair.init @(unsafe-last errs) 1))))))))))

  (doc parse
    "Parses program flags."
    ("After flags are parsed, each flag in the program will be filled " false)
    "with a value."
    "Use get to retrieve a flag value."
    "The programs args field will contain remaining command line arguments."
    "If the second argument is true, cease parsing immediately on failure.")
  (defn parse [program fail]
    (let-do [errs (CligProgram.errors program)
             args &System.args
             res  (Result.Success ())
             cli-args (CligProgram.args program)]
      (if (not (empty? errs))
          (Result.Error @(unsafe-first errs))
          (do (for [i 0 (StaticArray.length args)]
                (let [arg (unsafe-nth args i)]
                  (if (not (starts-with? arg "-"))
                      (when (not (= i 0)) (push-back! cli-args @arg))
                      (match (parse-flag program arg (StaticArray.nth args (+ i 1)))
                        (Result.Success consumed) (+= i consumed)
                        (Result.Error errpair)
                          (do (+= i @(Pair.b &errpair))
                              (set! res (Result.Error @(Pair.a &errpair)))
                              (if fail (break) ()))))))
              res))))

  (doc get-errors-string
    "Returns all program parsing errors as a newline separated string.")
  (defn get-errors-string [program]
    (let [errs (copy-map &(fn [f] (Clig.Err.to-string @f)) (CligProgram.errors program))]
      (String.join "\n\t" &(Array.concat &[[@"argument parsing errors: "] errs]))))
)
