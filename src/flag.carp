(deftype CligType String Int Float Bool)

(deftype CligFlag [name        String
                   short       (Maybe String)
                   t           CligType
                   default     String
                   value       String
                   description String])

(defmodule CligFlag
  (sig v-prn (Fn [CligFlag] String))
  (defn v-prn [f]
    (CligFlag.prn &f))
  (implements prn v-prn)
)

(defmodule Clig
  ;; Flag initializers
  (defn bool-flag [long-name short-name default-value description]
    (CligFlag long-name
              short-name
              (CligType.Bool)
              default-value
              @&default-value
              description))
  (defn string-flag [long-name short-name default-value description]
    (CligFlag long-name
              short-name
              (CligType.String)
              default-value
              @&default-value
              description))
  (defn int-flag [long-name short-name default-value description]
    (CligFlag long-name
              short-name
              (CligType.Int)
              default-value
              @&default-value
              description))
  (defn float-flag [long-name short-name default-value description]
    (CligFlag long-name
              short-name
              (CligType.Float)
              default-value
              @&default-value
              description))

  (defn type-validation [flag]
    (let [val (CligFlag.value flag)]
      (match-ref (CligFlag.t flag)
        (CligType.String) true
        (CligType.Bool) (or (= val "true") (= val "false"))
        (CligType.Int) (just? &(Int.from-string val))
        (CligType.Float) (just? &(Float.from-string val))
        _ false)))

  (defn valid? [flag]
      (type-validation flag))


  (defn flag-usage [flag]
    (let-do [name (String.concat &[@"--" @(CligFlag.name flag)])
             desc @(CligFlag.description flag)
             default (CligFlag.default flag)]
      (match-ref (CligFlag.short flag)
        (Maybe.Just s) (set! name (String.concat &[name @" (-" @s @")"]))
        (Maybe.Nothing) ())
      (when (not (empty? default))
        (set! desc (String.concat &[desc @"\tdefault value: " @default])))
      (String.join ": " &[name desc])))
)
